/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package basura;

import domain.Nodo;
import domain.Punto;
import interfaz.Agente;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.List;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.event.MouseWheelEvent;
import java.awt.event.MouseWheelListener;
import java.util.ArrayList;
import java.util.Iterator;
import javax.swing.ImageIcon;
import javax.swing.JScrollBar;
import javax.swing.Timer;

/**
 *
 * @author USUARIO
 */
public class PanelMapa extends javax.swing.JPanel implements MouseMotionListener, MouseWheelListener,MouseListener{

    /**
     * Creates new form PanelMapa
     */
    private double tamanioMapaX=190.0;
    private double tamanioMapaY=102.0;
    public ImageIcon imagenFondo; 
    public Image iconoAgente;
    public Agente agente;
    public Timer timer;
    public ArrayList listaRecorrido;
    public double zoom;
    public int imagenFondoX,imagenFondoY,imagenFondoZoomX, imagenFondoZoomY;
    public boolean realizaZoom;
    
    
    public PanelMapa() {
        init();
        
    }
    public void init(){
        imagenFondoX=0;
        imagenFondoY=0;
        realizaZoom=false;
        zoom=1;
        listaRecorrido= new ArrayList();
        listaRecorrido.add(108.0);
        listaRecorrido.add(39.0);
        setLayout(null);
        
        agente= new Agente();       
        agente.setPosicionX(108);
        agente.setPosicionY(39);
        iconoAgente= new ImageIcon(getClass().getResource("/imagen/Upgraded_Robot_Sprite.png")).getImage(); // NOI18N
        
        timer = new Timer(16, new ActionListener (){
            double i=104.0;
            @Override
            public void actionPerformed(ActionEvent e) {
                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                if(i==110.0)
                    timer.stop();
                listaRecorrido.add(i);
                listaRecorrido.add(30.0);
                agente.setPosicionXY((int)i, 30);
                i+=1.0;
                repaint();
            }
        
            });
        addMouseListener(this);
        addMouseMotionListener(this);
        addMouseWheelListener(this);
        //JScrollBar scroll= new JScrollBar();
        //scroll.setBounds(380, 0, 20, 300);
        //add(scroll);
        
        
        
    }
    public void animar(boolean turnOnOff) {
        if (turnOnOff) {           
            timer.start();
        } else {
            timer.stop();
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     
    @SuppressWarnings("unchecked");
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollBar2 = new javax.swing.JScrollBar();
        label = new javax.swing.JLabel();
        jScrollBar1 = new javax.swing.JScrollBar();

        setLayout(null);
        add(jScrollBar2);
        jScrollBar2.setBounds(425, 0, 17, 300);

        label.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagen/Upgraded_Robot_Sprite.png"))); // NOI18N
        add(label);
        label.setBounds(104, 137, 55, 48);
        add(jScrollBar1);
        jScrollBar1.setBounds(380, 0, 20, 300);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollBar jScrollBar1;
    private javax.swing.JScrollBar jScrollBar2;
    private javax.swing.JLabel label;
    // End of variables declaration//GEN-END:variables
*/
public void paint(Graphics g){
        
        
        super.paint(g);
        Dimension tamanio = getSize();
        setOpaque(false);
        Graphics2D g2d = (Graphics2D)g;
        
        //Colocamos el mapa
        //imagenFondo = new ImageIcon(getClass().getResource("/imagen/Upgraded_Robot_Sprite.png"));  
        imagenFondo = new ImageIcon(getClass().getResource("/imagen/FRSF Planta Baja 12k.png")); 
        g2d.scale(zoom, zoom);
        //if(!realizaZoom){
        // g2d.translate(tamanio.width/2, tamanio.height/2);-647/2,-343/2
           g2d.drawImage(imagenFondo.getImage(),0,0,tamanio.width, tamanio.height, null);    
           
            imagenFondoZoomX=tamanio.width;
            imagenFondoZoomY=tamanio.height;
        
        
           
            System.out.println("altura imagen:"+imagenFondo.getIconHeight()+
                    "clic en y:"+imagenFondoY+ "tamaño pantalla en Y"+ tamanio.height);
             System.out.println("anchura imagen:"+imagenFondo.getIconWidth()+
                    "clic en x:"+imagenFondoX+ "tamaño pantalla en X"+ tamanio.width
             +"zoom"+zoom+"calculo"+((imagenFondoX-tamanio.width)*zoom));
            //g2d.drawImage(imagenFondo.getImage(),imagenFondoX,imagenFondoY,imagenFondoZoomX, imagenFondoZoomY, null);
        
        
        
        //puntos     
        g.translate(0,tamanio.height);
       
        //HALL
        g.setColor(Color.RED);       
        double x= tamanio.width*(108.0/tamanioMapaX);
        double y =tamanio.height*(39.0/tamanioMapaY);        
        g.fillOval((int)x,(int)-y,10,10);
       
        //FAGDUT
        g.setColor(Color.BLUE);
        x= tamanio.width*(104.0/tamanioMapaX);
        y =tamanio.height*(30.0/tamanioMapaY);
        g.fillOval((int)x,(int)-y,10,10);
        
        //AULA1
        g.setColor(Color.BLACK);
        x= tamanio.width*(110.0/tamanioMapaX);
        y =tamanio.height*(30.0/tamanioMapaY);
        g.fillOval((int)x,(int)-y,10,10);
        
        //IconoAgente
        x= tamanio.width*(agente.getPosicionX()/tamanioMapaX);
        y =tamanio.height*(agente.getPosicionY()/tamanioMapaY);
        g.drawImage(iconoAgente, (int)x, (int)-y, null);
        
        //Dibuja lineas del recorrido del agete
        
        
        for (int i=0; i+4<=listaRecorrido.size();i++) {
            
            g2d.setStroke(new BasicStroke(5));
            g2d.setColor(Color.RED);
            double x1= tamanio.width*((double)listaRecorrido.get(i)/tamanioMapaX);
            double y1 =tamanio.height*((double)listaRecorrido.get(i+1)/tamanioMapaY);
            double x2= tamanio.width*((double)listaRecorrido.get(i+2)/tamanioMapaX);
            double y2 =tamanio.height*((double)listaRecorrido.get(i+3)/tamanioMapaY);
            g2d.drawLine((int)x1,(int)-y1,(int)x2,(int)-y2);
            
            g.setColor(Color.GREEN);
       
             g.fillOval((int)x1,(int)-y1,10,10);
        
        }
        
    }    

    @Override
    public void mouseDragged(MouseEvent e) {
        
    }

    @Override
    public void mouseMoved(MouseEvent e) {
        //realizaZoom=true;
        if(imagenFondoZoomX>-(imagenFondo.getIconWidth()-this.getWidth())){
            if(e.getX()>(this.getWidth()-50)){
                imagenFondoZoomX-=10;
                repaint();
            }
        }
        if(imagenFondoZoomX<0){
            if(e.getX()>0 && e.getX()<50){
                imagenFondoZoomX+=10;
                repaint();
            }
        }
        if(imagenFondoZoomY<0){
            if(e.getY()>0 && e.getY()<50){
                imagenFondoZoomY+=10;
                repaint();
            }
        }
        if(imagenFondoZoomY>-(imagenFondo.getIconHeight()-this.getHeight())){
            if(e.getY()>(this.getHeight()-50)){
                imagenFondoZoomY-=10;
                //imagenFondoY+=10;
                repaint();
            }
        }
    }

    @Override
    public void mouseWheelMoved(MouseWheelEvent e) {
        realizaZoom=true;
        if(e.getWheelRotation()<0){
            zoom+=-e.getUnitsToScroll()*0.3;
        }
        else{
            if(zoom>1){
                zoom-=e.getUnitsToScroll()*0.3;
            }
        }
        repaint();
        realizaZoom=false;
       }

    @Override
    public void mouseClicked(MouseEvent e) {
/*        imagenFondoX=e.getX()-(int)zoom;
        imagenFondoY=e.getY()-(int)zoom;
        System.out.println("zoom"+zoom+ "x"+e.getX()+ "suma"+imagenFondoX+"sumay"+imagenFondoY);
        
        */
        imagenFondoX=e.getX();
       imagenFondoY=e.getY();
        
    
        repaint();
   }

    @Override
    public void mousePressed(MouseEvent e) {
       }

    @Override
    public void mouseReleased(MouseEvent e) {
        
    }

    @Override
    public void mouseEntered(MouseEvent e) {
       }

    @Override
    public void mouseExited(MouseEvent e) {
       }
    

}
